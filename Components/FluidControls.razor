@* <button @onclick="() => Console.WriteLine(3)">Button</button> *@
<div class="d-grid gap-2 " style="grid-template-columns: repeat(2, 1fr); width:25%;">
<button class="btn btn-outline-primary" @onclick="(() => setUpSim(SIM_TYPE.Tank))">Tank</button>
<button class="btn btn-outline-primary" @onclick="(() => setUpSim(SIM_TYPE.WindTunnel))">Wind Tunnel</button>
<button class="btn btn-outline-primary" @onclick="(() => setUpSim(SIM_TYPE.Paint))">Paint</button>
<button class="btn btn-outline-primary" @onclick="(() => setUpSim(SIM_TYPE.HiresTunnel))">Hires Tunnel</button>
</div>
<br>
<div>
<label><InputCheckbox @bind-Value="showStreamLines"/>StreamLines</label><br>
<label><InputCheckbox @bind-Value="showVelocities"/>Velocities</label><br>
<label><InputCheckbox @bind-Value="showPressure"/>Pressure</label><br>
<label><InputCheckbox @bind-Value="showSmoke"/>Smoke</label><br>
<label><InputCheckbox @bind-Value="overRelaxation"/>Over-Relaxation</label><br>
</div>
@code {
    public enum SIM_TYPE { Tank, WindTunnel, Paint, HiresTunnel }

    [Parameter]
    public bool showStreamLines { get; set; } = false;
    [Parameter]
    public EventCallback<bool> showStreamLinesChanged { get; set; }

    [Parameter]
    public bool showVelocities { get; set; } = false;
    [Parameter]
    public EventCallback<bool> showVelocitiesChanged { get; set; }
    [Parameter]
    public bool showPressure { get; set; } = false;
    [Parameter]
    public EventCallback<bool> showPressureChanged { get; set; }
    [Parameter]
    public bool showSmoke { get; set; } = false;
    [Parameter]
    public EventCallback<bool> showSmokeChanged { get; set; }
    [Parameter]
    public bool overRelaxation { get; set; } = false; // need certain values, not just on/off
    [Parameter]
    public EventCallback<bool> overRelaxationChanged { get; set; }

    [Parameter]
    public SIM_TYPE typeSelected { get; set; }
    [Parameter]
    public EventCallback<SIM_TYPE> typeSelectedChanged { get; set; }
    private async Task setUpSim(SIM_TYPE type)
    {
        typeSelected = type;
        await typeSelectedChanged.InvokeAsync(type); // notify parent
    }
}