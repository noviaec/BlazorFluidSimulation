@page "/fluid"
@rendermode InteractiveServer

<PageTitle>Fluid Simulation</PageTitle>

<div class="fluid-simulation">
    <h3>Choose Simulation Environment</h3>
    <FluidControls @bind-typeSelected="simType" />
    <FluidRenderer />
</div>
<h4>Current Simulation Type: @simType</h4>
@code {
    FluidSimulation fluidSimulation = new FluidSimulation(2.2f, 10, 10, 10);
    FluidControls.SIM_TYPE simType;
    FluidControls.SIM_TYPE lastSimType;
    protected override void OnParametersSet()
    {
        if (lastSimType == simType) return; // no change, skip setup
        lastSimType = simType;
        switch (simType)
        {
            case FluidControls.SIM_TYPE.Tank:
                setupTankSimulation();
                break;
            case FluidControls.SIM_TYPE.WindTunnel:
                setupWindTunnelSimulation();
                break;
            case FluidControls.SIM_TYPE.Paint:
                setupPaintSimulation();
                break;
            case FluidControls.SIM_TYPE.HiresTunnel:
                setupHiresTunnelSimulation();
                break;
        }


    }

    public void setupTankSimulation()
    {
        fluidSimulation.setCellSize(0.5f); // TODO: adjust cell size based on simulation type
        fluidSimulation.setGridSize(10, 10);
        fluidSimulation.setCellType(0, 0, 1.0f); // TODO: algo for setting cell types
    }

    public void setupWindTunnelSimulation()
    {
        fluidSimulation.setCellSize(0.5f); // TODO: adjust cell size based on simulation type
        fluidSimulation.setGridSize(10, 10);
        fluidSimulation.setCellType(0, 0, 1.0f); // TODO: algo for setting cell types
    }

    public void setupPaintSimulation()
    {
        fluidSimulation.setCellSize(0.5f); // TODO: adjust cell size based on simulation type
        fluidSimulation.setGridSize(10, 10);
        fluidSimulation.setCellType(0, 0, 1.0f); // TODO: algo for setting cell types
    }

    public void setupHiresTunnelSimulation()
    {
        fluidSimulation.setCellSize(0.5f); // TODO: adjust cell size based on simulation type
        fluidSimulation.setGridSize(10, 10);
        fluidSimulation.setCellType(0, 0, 1.0f); // TODO: algo for setting cell types
    }
}


	@* var scene = 
	{
		gravity : -9.81,
		dt : 1.0 / 120.0,
		numIters : 100,
		frameNr : 0,
		overRelaxation : 1.9,
		obstacleX : 0.0,
		obstacleY : 0.0,
		obstacleRadius: 0.15,
		paused: false,
		sceneNr: 0,
		showObstacle: false,
		showStreamlines: false,
		showVelocities: false,	
		showPressure: false,
		showSmoke: true,
		fluid: null
	};

	function setupScene(sceneNr = 0) 
	{
		scene.sceneNr = sceneNr;
		scene.obstacleRadius = 0.15;
		scene.overRelaxation = 1.9;

		scene.dt = 1.0 / 60.0;
		scene.numIters = 40;

		var res = 100;
		
		if (sceneNr == 0)
			res = 50;
		else if (sceneNr == 3)
			res = 200;

		var domainHeight = 1.0;
		var domainWidth = domainHeight / simHeight * simWidth;
		var h = domainHeight / res;

		var numX = Math.floor(domainWidth / h);
		var numY = Math.floor(domainHeight / h);

		var density = 1000.0;

		f = scene.fluid = new Fluid(density, numX, numY, h);

		var n = f.numY;

		if (sceneNr == 0) {   		// tank

			for (var i = 0; i < f.numX; i++) {
				for (var j = 0; j < f.numY; j++) {
					var s = 1.0;	// fluid
					if (i == 0 || i == f.numX-1 || j == 0)
						s = 0.0;	// solid
					f.s[i*n + j] = s
				}
			}
			scene.gravity = -9.81;
			scene.showPressure = true;
			scene.showSmoke = false;
			scene.showStreamlines = false;
			scene.showVelocities = false;
		}
		else if (sceneNr == 1 || sceneNr == 3) { // vortex shedding

			var inVel = 2.0;
			for (var i = 0; i < f.numX; i++) {
				for (var j = 0; j < f.numY; j++) {
					var s = 1.0;	// fluid
					if (i == 0 || j == 0 || j == f.numY-1)
						s = 0.0;	// solid
					f.s[i*n + j] = s

					if (i == 1) {
						f.u[i*n + j] = inVel;
					}
				}
			}

			var pipeH = 0.1 * f.numY;
			var minJ = Math.floor(0.5 * f.numY - 0.5*pipeH);
			var maxJ = Math.floor(0.5 * f.numY + 0.5*pipeH);

			for (var j = minJ; j < maxJ; j++)
				f.m[j] = 0.0;

			setObstacle(0.4, 0.5, true)

			scene.gravity = 0.0;
			scene.showPressure = false;
			scene.showSmoke = true;
			scene.showStreamlines = false;
			scene.showVelocities = false;

			if (sceneNr == 3) {
				scene.dt = 1.0 / 120.0;
				scene.numIters = 100;
				scene.showPressure = true;
			}

		}
		else if (sceneNr == 2) { // paint

			scene.gravity = 0.0;
			scene.overRelaxation = 1.0;
			scene.showPressure = false;
			scene.showSmoke = true;
			scene.showStreamlines = false;
			scene.showVelocities = false;
			scene.obstacleRadius = 0.1;
		}

		document.getElementById("streamButton").checked = scene.showStreamlines;
		document.getElementById("velocityButton").checked = scene.showVelocities;
		document.getElementById("pressureButton").checked = scene.showPressure;
		document.getElementById("smokeButton").checked = scene.showSmoke;
		document.getElementById("overrelaxButton").checked = scene.overRelaxation > 1.0;
		
	} *@

    	@* function simulate() 
	{
		if (!scene.paused)
			scene.fluid.simulate(scene.dt, scene.gravity, scene.numIters)
			scene.frameNr++;
	}

	function update() {
		simulate();
		draw();
		requestAnimationFrame(update);
	}
	
	setupScene(1);
	update(); *@